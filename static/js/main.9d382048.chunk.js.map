{"version":3,"sources":["global_state.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["signinInstance","subs","useComp","compNameInstance","compName","newCompName","forEach","fx","push","index","indexOf","splice","createCompNameInstance","Landing","React","lazy","Type_area","App","useState","setSignUp","getComp","subComp","unsubComp","GStoCompName","useEffect","fallback","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.9d382048.chunk.js","sourcesContent":["// Sign Up GS\r\nexport const useSignIn = (() => {\r\n    let signinInstance;\r\n    let subs = [];\r\n    const createSignInInstance = () => {\r\n        let signin = 0;\r\n        const getSignIn = () => {\r\n            return signin;\r\n        }\r\n        const setSignIn = (newSignIn) => {\r\n            signin = newSignIn;\r\n            subs.forEach(fx => fx());\r\n            return signin;\r\n        }\r\n        const subscribe = (fx) => {\r\n            subs.push(fx);\r\n        }\r\n        const unsubscribe = (fx) => {\r\n            let index = subs.indexOf(fx);\r\n            subs.splice(index, 1);\r\n        }\r\n\r\n        return [getSignIn, setSignIn, subscribe, unsubscribe];\r\n    }\r\n\r\n    return () => {\r\n        if (!signinInstance) {\r\n            signinInstance = createSignInInstance();\r\n        }\r\n        return signinInstance\r\n    }\r\n})()\r\n\r\n// compName GS\r\nexport const useComp = (() => {\r\n    let compNameInstance;\r\n    let subs = [];\r\n    const createCompNameInstance = () => {\r\n        let compName = \"landing\";\r\n        const getCompName = () => {\r\n            return compName;\r\n        }\r\n        const setCompName = (newCompName) => {\r\n            compName = newCompName;\r\n            subs.forEach(fx => fx());\r\n            return compName;\r\n        }\r\n        const subscribe = (fx) => {\r\n            subs.push(fx);\r\n        }\r\n        const unsubscribe = (fx) => {\r\n            let index = subs.indexOf(fx);\r\n            subs.splice(index, 1);\r\n        }\r\n\r\n        return [getCompName, setCompName, subscribe, unsubscribe];\r\n    }\r\n\r\n    return () => {\r\n        if (!compNameInstance) {\r\n            compNameInstance = createCompNameInstance();\r\n        }\r\n        return compNameInstance\r\n    }\r\n})()\r\n","// import moduls\nimport React, { useEffect, useState, Suspense } from 'react';\nimport { useComp } from './global_state'\n\n// style sheets\nimport './App.css';\n\n// import components\nconst Landing = React.lazy(() => import('./components/landing'));\nconst Type_area = React.lazy(() => import('./components/type_area'));\n\n\n// ------ Main Component ------ //\nfunction App() {\n  // states\n  const [compName, setSignUp] = useState(\"landing\");\n  // hooks\n  const [getComp, setComp, subComp, unsubComp] = useComp();\n\n  // functions\n  const GStoCompName = () => setSignUp(getComp());\n\n  useEffect(() => {\n    subComp(GStoCompName);\n\n    return () => {\n      unsubComp(GStoCompName);\n    }\n  }, [])\n  // Todo Add A Loading Component\n  return (<>\n    <Suspense fallback={<div>Loading...</div>}>\n      {compName === \"landing\" && <Landing />}\n      {compName === \"type_area\" && <Type_area />}\n    </Suspense>\n  </>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\n// serviceWorkerRegistration.unregister();\nserviceWorkerRegistration.register();\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}